{"version":3,"sources":["components/Toaster.js","assets/check.svg","assets/error.svg","assets/info.svg","assets/warning.svg","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Toaster","props","toasts","position","deleteToast","className","map","toast","i","style","backgroundColor","onClick","id","src","icon","alt","title","description","buttons","type","label","App","useState","setToasts","setPosition","autoDismiss","setAutoDismiss","autoDismissTime","setAutoDismissTime","toastProperties","useCallback","toastsItem","findIndex","e","splice","useEffect","interval","setTimeout","length","clearTimeout","Math","floor","random","checkIcon","errorIcon","infoIcon","warningIcon","showToast","name","value","onChange","htmlFor","placeholder","autoComplete","time","parseInt","target","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.465ac0de.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Toaster.css\";\n\nconst Toaster = (props) => {\n  const { toasts, position, deleteToast } = props;\n\n  return (\n    <>\n      <div className={`notification-container ${position}`}>\n        {toasts.map((toast, i) => (\n          <div\n            key={i}\n            className={`notification toast show ${position}`}\n            style={{ backgroundColor: toast.backgroundColor }}\n          >\n            <button onClick={() => deleteToast(toast.id)}>X</button>\n            <div className=\"notification-image\">\n              <img src={toast.icon} alt=\"\" />\n            </div>\n            <div>\n              <p className=\"notification-title\">{toast.title}</p>\n              <p className=\"notification-message\">{toast.description}</p>\n            </div>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nToaster.propTypes = {\n  toasts: PropTypes.array.isRequired,\n  position: PropTypes.string,\n  deleteToast: PropTypes.func,\n};\n\nexport default Toaster;\n","export default __webpack_public_path__ + \"static/media/check.d639b7bb.svg\";","export default __webpack_public_path__ + \"static/media/error.f4c49f9a.svg\";","export default __webpack_public_path__ + \"static/media/info.b6c887b0.svg\";","export default __webpack_public_path__ + \"static/media/warning.9bbdb2f3.svg\";","import React, { useState, useEffect, useCallback } from \"react\";\nimport \"./App.css\";\nimport Toaster from \"./components/Toaster\";\nimport checkIcon from \"./assets/check.svg\";\nimport errorIcon from \"./assets/error.svg\";\nimport infoIcon from \"./assets/info.svg\";\nimport warningIcon from \"./assets/warning.svg\";\n\nconst buttons = [\n  {\n    id: 1,\n    type: \"success\",\n    className: \"success\",\n    label: \"Success\",\n  },\n  {\n    id: 2,\n    type: \"danger\",\n    className: \"danger\",\n    label: \"Danger\",\n  },\n  {\n    id: 3,\n    type: \"info\",\n    className: \"info\",\n    label: \"Info\",\n  },\n  {\n    id: 4,\n    type: \"warning\",\n    className: \"warning\",\n    label: \"Warning\",\n  },\n];\n\nconst App = () => {\n  const [toasts, setToasts] = useState([]);\n  const [position, setPosition] = useState(\"Select Position\");\n  let [autoDismiss, setAutoDismiss] = useState(false);\n  const [autoDismissTime, setAutoDismissTime] = useState(0);\n  let toastProperties = null;\n\n  const selectPosition = (e) => {\n    setPosition(e.target.value);\n    setToasts([]);\n  };\n\n  const deleteToast = useCallback(\n    (id) => {\n      const toastsItem = toasts.findIndex((e) => e.id === id);\n      toasts.splice(toastsItem, 1);\n      setToasts([...toasts]);\n    },\n    [toasts]\n  );\n\n  const showToast = (type) => {\n    const id = Math.floor(Math.random() * 101 + 1);\n\n    switch (type) {\n      case \"success\":\n        toastProperties = {\n          id,\n          title: \"Success\",\n          description: \"This is a success toast component\",\n          backgroundColor: \"#5cb85c\",\n          icon: checkIcon,\n        };\n        break;\n      case \"danger\":\n        toastProperties = {\n          id,\n          title: \"Danger\",\n          description: \"This is a error toast component\",\n          backgroundColor: \"#d9534f\",\n          icon: errorIcon,\n        };\n        break;\n      case \"info\":\n        toastProperties = {\n          id,\n          title: \"Info\",\n          description: \"This is an info toast component\",\n          backgroundColor: \"#5bc0de\",\n          icon: infoIcon,\n        };\n        break;\n      case \"warning\":\n        toastProperties = {\n          id,\n          title: \"Warning\",\n          description: \"This is a warning toast component\",\n          backgroundColor: \"#f0ad4e\",\n          icon: warningIcon,\n        };\n        break;\n\n      default:\n        setToasts([]);\n    }\n\n    setToasts([...toasts, toastProperties]);\n  };\n\n  const toggleAutoDismiss = () => {\n    autoDismiss = !autoDismiss;\n    setAutoDismiss(autoDismiss);\n    setToasts([]);\n  };\n\n  const changeAutoDismissTime = (e) => {\n    const time = parseInt(e.target.value, 10);\n    setAutoDismissTime(time);\n  };\n\n  useEffect(() => {\n    const interval = setTimeout(() => {\n      if (autoDismiss && toasts.length) {\n        deleteToast(toasts[0].id);\n      }\n    }, autoDismissTime);\n    return () => {\n      clearTimeout(interval);\n    };\n  }, [autoDismiss, autoDismissTime, toasts, deleteToast]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-header\">\n        <p>React Toaster Component</p>\n        <p>Built with JavaScript!</p>\n        <div className=\"toast-buttons\">\n          {buttons.map((e) => (\n            <button\n              key={e.id}\n              className={`${\n                position === \"Select Position\"\n                  ? `btn ${e.className} btn-disable`\n                  : `btn ${e.className}`\n              }`}\n              onClick={() => showToast(e.type)}\n            >\n              {e.label}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"select\">\n          <input\n            id=\"auto\"\n            type=\"checkbox\"\n            name=\"checkbox\"\n            value={autoDismiss}\n            onChange={toggleAutoDismiss}\n          />\n          <label htmlFor=\"auto\">Auto Dismiss</label>\n        </div>\n        <div className=\"select\">\n          <input\n            className={`${!autoDismiss ? \"disabled\" : \"\"}`}\n            type=\"text\"\n            name=\"checkbox\"\n            placeholder=\"Dismiss time Ex: 3000\"\n            autoComplete=\"false\"\n            onChange={changeAutoDismissTime}\n          />\n        </div>\n        <div className=\"select\">\n          <select\n            name=\"position\"\n            title=\"position\"\n            onChange={selectPosition}\n            className=\"position-select\"\n          >\n            <option> Select Position</option>\n            <option value=\"top-right\">Top Right</option>\n            <option value=\"top-left\">Top Left</option>\n            <option value=\"bottom-left\">Bottom Left</option>\n            <option value=\"bottom-right\">Bottom Right</option>\n          </select>\n        </div>\n        <br />\n        <p>\n          To checkout the Toaster built with Blazor{\" \"}\n          <a href=\"https://sumanhansada.github.io/BlazorToasterDemo/\">\n            Click Here!\n          </a>\n        </p>\n      </div>\n\n      <Toaster toasts={toasts} position={position} deleteToast={deleteToast} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}